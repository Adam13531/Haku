generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model EmailAllowList {
  id    String @id @default(cuid())
  email String @unique
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  sessions Session[]
  folders  Folder[]
  notes    Note[]
  todos    Todo[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id   String     @id @default(cuid())
  name String     @db.Citext
  type FolderType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children Folder[] @relation("FolderToFolder")

  notes Note[]
  todos Todo[]

  @@unique([parentId, type, userId, name], map: "Folder_parentId_type_userId_name_unique_constraint")
  @@index([parentId, type, userId], name: "Folder_parentId_type_userId_index")
}

enum FolderType {
  NOTE
  TODO
}

model Note {
  id   String @id @default(cuid())
  name String @db.Citext
  slug String

  html String
  text String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  folderId String?
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([folderId, userId, name], map: "Note_folderId_userId_name_unique_constraint")
}

model Todo {
  id   String @id @default(cuid())
  name String @db.Citext
  slug String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  folderId String?
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  root String[]

  nodes TodoNode[]

  @@unique([folderId, userId, name], map: "Todo_folderId_userId_name_unique_constraint")
}

model TodoNode {
  id        String  @id @default(cuid())
  collapsed Boolean @default(false)
  completed Boolean @default(false)
  content   String
  noteHtml  String?
  noteText  String?

  children String[]

  todoId String?
  todo   Todo?   @relation(fields: [todoId], references: [id])
}
